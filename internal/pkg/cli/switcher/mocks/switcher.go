// Code generated by MockGen. DO NOT EDIT.
// Source: ./switcher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockconnect is a mock of connect interface.
type Mockconnect struct {
	ctrl     *gomock.Controller
	recorder *MockconnectMockRecorder
}

// MockconnectMockRecorder is the mock recorder for Mockconnect.
type MockconnectMockRecorder struct {
	mock *Mockconnect
}

// NewMockconnect creates a new mock instance.
func NewMockconnect(ctrl *gomock.Controller) *Mockconnect {
	mock := &Mockconnect{ctrl: ctrl}
	mock.recorder = &MockconnectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconnect) EXPECT() *MockconnectMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockconnect) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockconnectMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockconnect)(nil).Close))
}

// Write mocks base method.
func (m *Mockconnect) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockconnectMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*Mockconnect)(nil).Write), p)
}
